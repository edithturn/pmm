name: Common

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:

  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
        default: tip

jobs:
  check:
    name: Checks
    runs-on: ubuntu-22.04

    env:
      GO_VERSION: ${{ inputs.go-version || '1.18.x' }}
      GOPATH: ${{ github.workspace }}
      WORKING_DIR: ${{ github.workspace }}/src/github.com/percona/pmm

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Check out code into the working directory under the GOPATH
        uses: percona-platform/checkout@v3
        with:
          fetch-depth: 1
          path: ${{ env.WORKING_DIR }}

      - name: Set up Go release
        if: env.GO_VERSION != 'tip'
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Go tip
        if: env.GO_VERSION == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-

      - name: Download Go modules
        run: go mod download

      - name: Install development tools
        run: make init

      - name: Check build
        run: make release

      - name: Run required checks/linters
        env:
          # use GITHUB_TOKEN because only it has access to GitHub Checks API
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # In case the workflow triggered by pull_request event, we want to redirect linter's output to reviewdog.
          # The selection made through converting available cases to json and then choosing an element depending on logical value (true=1, false=0).
          GOLANGCI_LINT_REDIRECT: ${{ toJson('["", "| bin/reviewdog -f=golangci-lint -reporter=github-pr-review -fail-on-error=true"]')[github.event.pull_request != null] }}
          GO_CONSISTENT_REDIRECT: ${{ toJson('["", "| bin/reviewdog -f=go-consistent -reporter=github-pr-review -fail-on-error=true"]')[github.event.pull_request != null] }}
        run: |
          # go run ../.github/check-license.go # TODO: This repo has multiple licenses, fix checker. https://jira.percona.com/browse/PMM-10118
          
          bin/go-sumtype ./...
          bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number ${{ env.GOLANGCI_LINT_REDIRECT }}

          # run it like this until it will be added to golangci-lint. https://github.com/golangci/golangci-lint/issues/288
          bin/go-consistent -pedantic -exclude "tests" ./... ${{ env.GO_CONSISTENT_REDIRECT }}

      - name: Run optional checks/linters
        env:
          # use ROBOT_TOKEN for better reviewer's name
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
          # See description of GOLANGCI_LINT_REDIRECT above.
          GOLANGCI_LINT_REDIRECT: ${{ toJson('["", "| bin/reviewdog -f=golangci-lint -reporter=github-pr-review"]')[github.event.pull_request != null] }}
        run: |
          bin/golangci-lint run --out-format=line-number ${{ env.GOLANGCI_LINT_REDIRECT }}


      - name: Test common API
        run: make test-common

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  merge-gatekeeper:
    needs: [check]
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    steps:
      - name: Run Merge Gatekeeper
        uses: percona-platform/merge-gatekeeper@v1.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          interval: 45
          timeout: 1200
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

  workflow_success:
    needs: [merge-gatekeeper]
    name: Slack Notification success
    runs-on: ubuntu-22.04
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN_PMM_CI }}
      SLACK_CHANNEL: "pmm-ci"
      SLACK_USERNAME: "PR pipelines bot"
      SLACK_ICON_EMOJI: ":chestnut:"
      SLACK_COLOR: "#00FF00"
      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
      SLACK_MESSAGE: "${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"

    steps:
      - uses: percona-platform/checkout@v3
      - uses: percona-platform/setup-node@v2
      - name: Slack Notification
        uses: percona-platform/action-slack-notify@v2

  workflow_failure:
    if: ${{ failure() }}
    needs: [merge-gatekeeper]
    name: Slack Notification failure
    runs-on: ubuntu-22.04
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN_PMM_CI }}
      SLACK_CHANNEL: "pmm-ci"
      SLACK_USERNAME: "PR pipelines bot"
      SLACK_ICON_EMOJI: ":chestnut:"
      SLACK_COLOR: "#FF0000"
      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
      SLACK_MESSAGE: "Workflow failed: ${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"

    steps:
      - uses: percona-platform/checkout@v3
      - name: Slack Notification
        uses: percona-platform/action-slack-notify@v2
